#!/bin/bash
SERVERS=("game" "state" "billing")

S_RUNNING="running"
S_DOWN="down"

error() {
    echo -ne "\033[40;31;1m"
    echo $@
    echo -ne "\033[0m"
}
info() {
    echo -ne "\033[40;32;1m"
    echo $@
    echo -ne "\033[0m"
}

status() {
    local pidfile=bin/shaco."$1".pid
    if [[ -f ${pidfile} ]]; then
        local pid=$(cat ${pidfile})
        if [[ -x /proc/$pid ]]; then
            echo "${S_RUNNING} $pid"
            return
        fi
    fi
    echo ${S_DOWN}
}

start() {
    local name=$1
    local st=$(status ${name})
    if [[ "${st[0]}" == "${S_DOWN}" ]]; then
        info -n Starting ${name} server ...
        cd bin && \
            ./shaco config_${name} --daemon 1 && 
        cd ..
        sleep 1
        local pidfile=bin/shaco."${name}".pid
        while [[ ! -f "${pidfile}" ]]; do 
            sleep 1; 
        done
        info "[OK]"
    else
        echo "${name} server is already running"
    fi
}

stop() {
    local name=$1
    local st=$(status ${name})
    if [[ "${st}" == "${S_DOWN}" ]]; then
        echo "${name} server is already stopped"
    else
        st=($st)
        local pid=${st[1]}
        kill -2 $pid
        info "-n Stopping ${name} server ... "
        while [[ -x /proc/$pid ]]; do 
            sleep 1; 
        done
        info "[OK]"
    fi
}

ls() {
    for v in "${SERVERS[@]}"; do
        local st=($(status $v))
        st=${st[0]}
        if [[ "$st" == "$S_RUNNING" ]]; then
            info $v [$st]
        else
            error $v [$st]
        fi
    done
}

usage() {
    cat <<EOF
Usage: $0 [options]
Options:
        start name      start server 'name'
         stop name      stop server 'name'
      restart name      restart server 'name'
Servers:
EOF
    for v in "${SERVERS[@]}"; do
        printf "%18s\n\n" "$v"
    done
}

CMD=$1
shift

case "$CMD" in
start) start "$@";;
stop) stop "$@";;
restart) stop "$@"; start "$@";;
status) status "$@";;
ls) ls;;
*) usage;;
esac
